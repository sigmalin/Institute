// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWStructuredBuffer<float4> Result;

TextureCube<float4> cubemap;
SamplerState _LinearClamp;

int face;
int cubeSize;

#ifndef PI
#define PI 3.1415926536898
#endif


float4 filtering_cube_map(TextureCube<float4> cubemap, SamplerState state, float3 n) 
{
    n.yz = -n.yz;
    return cubemap.SampleLevel(state,n,0);
}

float3 calc_normal(int face, float2 uv) {
    // 6 Face(+X,-X,+Y,-Y,+Z,-Z) for [0,5]
    uv = (uv - 0.5) * 2.0;  // Convert range [0, 1] to [-1, 1]

    float3 n = float3(0.0, 0.0, 0.0);
    if (face == 0) {
        // +X face for Unity
        n.x = 1.0;
        n.zy = uv;
    } else if (face == 1) {
        // -X face for Unity
        n.x = -1.0;
        n.z = -uv.x;
        n.y = uv.y;
    } else if (face == 2) {
        // +Y face for Unity
		n.y = -1.0;
        n.x = uv.x;
        n.z = -uv.y;        
    } else if (face == 3) {
        // -Y face for Unity
        n.y = 1.0;
        n.xz = uv;
    } else if (face == 4) {
        // +Z face for Unity
		n.z = -1.0;
        n.xy = uv;        
    } else if (face == 5) {
        // -Z face for Unity
        n.z = 1.0;
        n.x = -uv.x;
        n.y = uv.y;
    }

    return n;
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // TODO: insert actual code here!
	int indx = id.y * cubeSize + id.x;

	float size = float(cubeSize - 1);

	float2 uv = float2(id.x / size, id.y / size);
	float3 normal = calc_normal(face, uv);

	Result[indx] = filtering_cube_map(cubemap, _LinearClamp, normal);    
}
