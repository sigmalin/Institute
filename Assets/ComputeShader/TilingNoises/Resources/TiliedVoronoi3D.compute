// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CS_Voronoi3D

#include "..\TilingNoises\Shaders\TilingNoiseCommon.cginc"
#include "..\TilingNoises\Shaders\TiliedCellularNoise.cginc"

RWStructuredBuffer<float> Result;

float TilingVoronoi3D(float3 st, float period)
{
	return 1.0 - TiliedCellularNoise3D(st, period);
}

float fBm(float3 st, float period)
{
	if(Octaves == 0) return 0.0;

	float final = 0.0;
	float amplitude = 0.5;
	float maxAmplitude = 0.0;

	for (int i = 0; i < Octaves; ++i)
	{
		final += TilingVoronoi3D(st, period) * amplitude;
		st *= Scale;
		maxAmplitude += amplitude;
		amplitude *= Persistence;
	}

	return final / maxAmplitude;
}


[numthreads(8,8,8)]
void CS_Voronoi3D (uint3 id : SV_DispatchThreadID)
{
    // TODO: insert actual code here!
	int indx = (id.z * TexWidth * TexHeight) + (id.y * TexWidth) + id.x;
	float3 st = float3(id.x / ((float)TexWidth-1.0), id.y / ((float)TexHeight-1.0), id.z / ((float)TexDepth-1.0));
	
    Result[indx] = fBm(st, Period);
}
